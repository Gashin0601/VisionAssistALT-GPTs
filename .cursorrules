# VisionAssistALT-GPTs Repository Rules

## ファイル構造の保持

このリポジトリは以下の構造を維持してください：
- README.md: リポジトリ概要
- visionassist-alt.md: GPTの全ての内容

## visionassist-alt.md の必須フォーマット

### 1. 説明セクション
- VisionAssist ALTの説明文は必ずインラインコードブロック（`...`）で囲む
- 例: `VisionAssist ALTは、XのALT機能用に...`

### 2. 指示セクション  
- 指示の内容全体を必ず大きなコードブロック（```...```）で囲む
- コードブロック内には以下を含める：
  - VisionAssist ALTの動作指示
  - 7つのガイドライン（OCR技術、情報の正確性、個人情報保護、日本語回答、技術活用、詳細説明、お問い合わせ）
  - 最後のクレジット文

### 3. 例セクション
- 10個の使用例を維持
- 各例は「例X: [タイトル]」形式
- 画像内容とALT説明の構造を保持
- セクション最後にクレジット文を含める

### 4. 会話のきっかけセクション
- 各会話のきっかけを必ずインラインコードブロック（`...`）で囲む
- 例: `「この画像の詳細な説明を教えてください。」`
- 番号付きリスト形式を維持

## 編集時の注意事項

1. **コードブロックの破損禁止**
   - 指示セクションの```開始・終了タグを削除・変更しない
   - 会話のきっかけの`インラインコード`を解除しない

2. **構造の保持**
   - セクション見出し（## 指示、## 例、## 会話のきっかけ）を変更しない
   - ファイル全体の階層構造を維持する

3. **内容の更新**
   - GPTの指示を更新する場合は、コードブロック内の内容のみを変更
   - 新しい例を追加する場合は、既存の形式に従う
   - 会話のきっかけを変更する場合は、インラインコードブロックを維持

4. **クレジット情報**
   - GCStudio（X：@GCStudio2024）のクレジット文を削除・変更しない
   - 指示セクションと例セクションの両方にクレジット文を保持

## ブランチ運用ルール

### メインブランチ
- **main**: リリース版のみ
  - 初期コミットのみを保持
  - 安定版のGPT定義を管理
  - 本番環境での使用を想定

### 開発ブランチ
- **development**: 開発・更新作業用
  - GPTの改善・機能追加
  - ドキュメントの更新
  - 設定ファイルの変更
  - すべての作業をここで実施

### ブランチ作業フロー
1. 開発作業は必ず`development`ブランチで実施
2. GPTの更新やテストが完了したら`main`にマージ
3. `main`ブランチは常にクリーンで安定した状態を維持
4. 緊急修正以外は直接`main`にコミットしない

## タグ運用ルール

- 目的: バージョンスナップショットとドキュメント状態の明確化
- 形式: 基本は注釈付きタグ（`git tag -a`）。署名可能なら `-s` を推奨

### タグ種別と方針
- `v1.0`: 初期スナップショットを指す。移動しない（不変）
- `v2.0-beta`: 2.0系プレリリースのスナップショット。原則は新しいタグを増やす（`v2.0.0-beta.1` 等）
  - ただし本リポではメンテ都合でプレリリース名の更新が必要な場合のみ付け替え可
- `docs`: ドキュメント管理タグ（`visionassist-alt.md` / `README.md` / `.cursorrules`）
  - 最新のドキュメント状態を指すため、このタグのみ「付け替え可」

### 運用ルール
- 公開済みのバージョンタグ（例: `v2.0.0`）は移動しない。修正は新タグで対応
- タグ作成は注釈付き（-a）でメッセージに変更概要を記載
- `docs` はドキュメント変更後に HEAD へ付け替える

### コマンド例
- バージョンタグ作成/公開:
  - `git tag -a v2.0.0 -m "v2.0.0: 変更概要"`
  - `git push origin v2.0.0`
- プレリリース（任意）:
  - `git tag -a v2.1.0-beta.1 -m "v2.1.0-beta.1: 変更概要"`
  - `git push origin v2.1.0-beta.1`
- docsタグ更新（付け替え可）:
  - `git tag -f docs HEAD`
  - `git push --force origin docs`

## 自動フォーマット設定

- マークダウンの自動整形時にコードブロックの構造を保持
- インデント調整時にコードブロック内のタブ・スペースを維持
- ファイル保存時にこれらのルールに違反していないかチェック